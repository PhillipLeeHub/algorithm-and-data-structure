def sudoku_solve(board):
  return backtrack(board)
  
def backtrack(board, r=0, c=0):
  # Go to next empty space  
  while board[r][c] != '.':
      c += 1
      if c == 9: c, r = 0, r+1
      if r == 9: return True
  
  if board[r][c] == '.':
    for num in range(1,10):
      if is_valid(board, r, c, str(num)):
        board[r][c] = str(num)
        if backtrack(board, r, c):
          return True
            
  board[r][c] = '.'
  return False
  
def is_valid(board, row, col, num):
  for i in range(9):
    if board[i][col] == num:
      return False
    if board[row][i] == num:
      return False
    # 'i//3' = [0, 0, 0, 1, 1, 1, 2, 2, 2] Increment up to 3
    # '(row - row % 3) = [0, 3, 6] Based on row, To bound to start of sub-board,
    box_row = i//3 + (row - row % 3)

    # i%3 = [0, 1, 2, 0, 1, 2, 0, 1, 2] # Loops over col
    # (col - col % 3) = [0, 3, 6] Based onm col, To bound to start of sub-board,
    box_col = (i%3) + (col - col % 3)
    #print(board[box_row][box_col])
    if board[box_row][box_col] == num:
      return False
  return True

test_case_1 =  [[".",".",".","7",".",".","3",".","1"],["3",".",".","9",".",".",".",".","."],[".","4",".","3","1",".","2",".","."],[".","6",".","4",".",".","5",".","."],[".",".",".",".",".",".",".",".","."],[".",".","1",".",".","8",".","4","."],[".",".","6",".","2","1",".","5","."],[".",".",".",".",".","9",".",".","8"],["8",".","5",".",".","4",".",".","."]]
test_case_2 = [[".","8","9",".","4",".","6",".","5"],[".","7",".",".",".","8",".","4","1"],["5","6",".","9",".",".",".",".","8"],[".",".",".","7",".","5",".","9","."],[".","9",".","4",".","1",".","5","."],[".","3",".","9",".","6",".","1","."],["8",".",".",".",".",".",".",".","7"],[".","2",".","8",".",".",".","6","."],[".",".","6",".","7",".",".","8","."]]
test_case_3 = [[".","2","3","4","5","6","7","8","9"],["1",".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".",".","."]]
test_case_4 = [[".",".","5",".",".","2",".",".","."],[".",".","9",".","4","7",".","2","."],[".",".","8",".","5","6",".",".","1"],[".",".",".",".",".","8","3","4","."],[".",".",".",".",".",".",".",".","6"],[".",".",".",".","3",".","1","8","."],[".","2",".",".",".",".",".",".","."],[".","9",".",".","8",".","6","7","."],["3",".","6","5","7",".",".",".","."]]
test_case_5 = [[".",".","3","8",".",".","4",".","."],[".",".",".",".","1",".",".","7","."],[".","6",".",".",".","5",".",".","9"],[".",".",".","9",".",".","6",".","."],[".","2",".",".",".",".",".","1","."],[".",".","4",".",".","3",".",".","2"],[".",".","2",".",".",".","8",".","."],[".","1",".",".",".",".",".","5","."],["9",".",".",".",".","7",".",".","3"]]
test_case_6 = [[".",".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".",".","."]]

assert(sudoku_solve(test_case_1) == True)
assert(sudoku_solve(test_case_2) == False)
assert(sudoku_solve(test_case_3) == False)
assert(sudoku_solve(test_case_4) == True)
assert(sudoku_solve(test_case_5) == True)
assert(sudoku_solve(test_case_6) == True)


